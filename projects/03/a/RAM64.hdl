// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    DMux8Way(in=true, sel=address[0..2], a=m0, b=m1, c=m2, d=m3, e=m4, f=m5, g=m6,
    h=m7);
    And(a=m0, b=load, out=c0);
    And(a=m1, b=load, out=c1);
    And(a=m2, b=load, out=c2);
    And(a=m3, b=load, out=c3);
    And(a=m4, b=load, out=c4);
    And(a=m5, b=load, out=c5);
    And(a=m6, b=load, out=c6);
    And(a=m7, b=load, out=c7);

    RAM8(in=in, load=c0, address=address[3..5], out=m0o);
    RAM8(in=in, load=c1, address=address[3..5], out=m1o);
    RAM8(in=in, load=c2, address=address[3..5], out=m2o);
    RAM8(in=in, load=c3, address=address[3..5], out=m3o);
    RAM8(in=in, load=c4, address=address[3..5], out=m4o);
    RAM8(in=in, load=c5, address=address[3..5], out=m5o);
    RAM8(in=in, load=c6, address=address[3..5], out=m6o);
    RAM8(in=in, load=c7, address=address[3..5], out=m7o);

    Mux8Way16(a=m0o, b=m1o, c=m2o, d=m3o, e=m4o, f=m5o, g=m6o, h=m7o,
    sel=address[0..2], out=out);
}
